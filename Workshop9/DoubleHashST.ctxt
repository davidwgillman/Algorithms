#BlueJ class context
comment0.target=DoubleHashST
comment0.text=\n\ \ The\ {@code\ DoubleHashST}\ class\ represents\ a\ symbol\ table\ of\ generic\n\ \ key-value\ pairs.\n\ \ It\ supports\ the\ usual\ <em>put</em>,\ <em>get</em>,\ <em>contains</em>,\n\ \ <em>delete</em>,\ <em>size</em>,\ and\ <em>is-empty</em>\ methods.\n\ \ It\ also\ provides\ a\ <em>keys</em>\ method\ for\ iterating\ over\ all\ of\ the\ keys.\n\ \ A\ symbol\ table\ implements\ the\ <em>associative\ array</em>\ abstraction\:\n\ \ when\ associating\ a\ value\ with\ a\ key\ that\ is\ already\ in\ the\ symbol\ table,\n\ \ the\ convention\ is\ to\ replace\ the\ old\ value\ with\ the\ new\ value.\n\ \ Unlike\ {@link\ java.util.Map},\ this\ class\ uses\ the\ convention\ that\n\ \ values\ cannot\ be\ {@code\ null}\u2014setting\ the\n\ \ value\ associated\ with\ a\ key\ to\ {@code\ null}\ is\ equivalent\ to\ deleting\ the\ key\n\ \ from\ the\ symbol\ table.\n\ \ <p>\n\ \ This\ implementation\ uses\ two\ hash\ tables,\ each\ with\ its\ own\ hash\ function.\ \n\ \ Any\ given\ key\ is\ in\ one\ of\ the\ two\ tables\ but\ not\ both.\n\n\ \ Inserting\ a\ new\ key\ works\ like\ this\:\n\ \ 1.\ Hash\ the\ new\ key\ to\ the\ table\ with\ fewer\ elements.\n\ \ 2.\ If\ the\ table\ position\ is\ occupied,\ evict\ that\ key\ and\ replace\ it\ with\ the\ new\ key,\ and\n\ \ \ \ \ hash\ the\ old\ key\ into\ the\ other\ table\ (again\ evicting\ a\ key\ that\ might\ reside\ there).\n\ \ 3.\ Keep\ evicting\ keys\ and\ hashing\ them\ to\ the\ other\ table\ until\ either\n\ \ \ \ \ a.\ there's\ no\ collision,\ and\ the\ insertion\ is\ finished\n\ \ \ \ \ b.\ there's\ a\ cycle\ (the\ same\ key\ gets\ kicked\ out\ twice);\ in\ this\ case,\ rehash\ both\ tables\n\ \ \n\ \ This\ implementation\ requires\ that\ the\ key\ type\ override\ the\ {@code\ equals()}\ and\ \n\ \ {@code\ hashCode()}\ methods.\n\ \ \n\ \ This\ code\ is\ modified\ from\ LinearProbingHashST.java\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\n
comment1.params=
comment1.target=DoubleHashST()
comment1.text=\n\ Initializes\ an\ empty\ symbol\ table.\n
comment10.params=key
comment10.target=java.lang.Object\ get(java.lang.Object)
comment10.text=\n\ Returns\ the\ value\ associated\ with\ the\ specified\ key.\n\ @param\ key\ the\ key\n\ @return\ the\ value\ associated\ with\ {@code\ key};\n\ \ \ \ \ \ \ \ \ {@code\ null}\ if\ no\ such\ value\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment11.params=key
comment11.target=void\ delete(java.lang.Object)
comment11.text=\n\ Removes\ the\ specified\ key\ and\ its\ associated\ value\ from\ this\ symbol\ table\ \ \ \ \ \n\ (if\ the\ key\ is\ in\ this\ symbol\ table).\ \ \ \ \n\n\ @param\ \ key\ the\ key\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment12.params=
comment12.target=java.lang.Iterable\ keys()
comment12.text=\n\ Returns\ all\ keys\ in\ this\ symbol\ table\ as\ an\ {@code\ Iterable}.\n\ To\ iterate\ over\ all\ of\ the\ keys\ in\ the\ symbol\ table\ named\ {@code\ st},\n\ use\ the\ foreach\ notation\:\ {@code\ for\ (Key\ key\ \:\ st.keys())}.\n\n\ @return\ all\ keys\ in\ this\ symbol\ table\n
comment13.params=
comment13.target=boolean\ check()
comment14.params=args
comment14.target=void\ main(java.lang.String[])
comment14.text=\n\ Unit\ tests\ the\ {@code\ DoubleHashST}\ data\ type.\n\n\ @param\ args\ the\ command-line\ arguments\n
comment2.params=capacity
comment2.target=DoubleHashST(int)
comment2.text=\n\ Initializes\ an\ empty\ symbol\ table\ with\ the\ specified\ initial\ capacity.\n\n\ @param\ capacity\ the\ initial\ capacity\n
comment3.params=
comment3.target=int\ size()
comment3.text=\n\ Returns\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table.\n\n\ @return\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table\n
comment4.params=
comment4.target=boolean\ isEmpty()
comment4.text=\n\ Returns\ true\ if\ this\ symbol\ table\ is\ empty.\n\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ is\ empty;\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\n
comment5.params=key
comment5.target=boolean\ contains(java.lang.Object)
comment5.text=\n\ Returns\ true\ if\ this\ symbol\ table\ contains\ the\ specified\ key.\n\n\ @param\ \ key\ the\ key\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ contains\ {@code\ key};\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment6.params=key\ k
comment6.target=int\ hash(java.lang.Object,\ int)
comment7.params=capacity
comment7.target=void\ resize(int)
comment8.params=
comment8.target=void\ rehash()
comment9.params=key\ val
comment9.target=void\ put(java.lang.Object,\ java.lang.Object)
comment9.text=\n\ Inserts\ the\ specified\ key-value\ pair\ into\ the\ symbol\ table,\ overwriting\ the\ old\ \n\ value\ with\ the\ new\ value\ if\ the\ symbol\ table\ already\ contains\ the\ specified\ key.\n\ Deletes\ the\ specified\ key\ (and\ its\ associated\ value)\ from\ this\ symbol\ table\n\ if\ the\ specified\ value\ is\ {@code\ null}.\n\n\ Fill\ in\ this\ code\ according\ to\ the\ description\ at\ the\ top\ of\ the\ file.\n\n\ @param\ \ key\ the\ key\n\ @param\ \ val\ the\ value\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
numComments=15
