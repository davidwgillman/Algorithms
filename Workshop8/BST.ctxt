#BlueJ class context
comment0.target=BST
comment0.text=\n\n\ \ @author\ Robert\ Sedgewick\n\ \ @author\ Kevin\ Wayne\n
comment1.params=
comment1.target=BST()
comment1.text=\n\ Initializes\ an\ empty\ symbol\ table.\n
comment10.params=
comment10.target=int\ getCompareCount()
comment11.params=
comment11.target=boolean\ lastPut()
comment12.params=
comment12.target=void\ deleteMin()
comment12.text=\n\ Removes\ the\ smallest\ key\ and\ associated\ value\ from\ the\ symbol\ table.\n\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\n
comment13.params=x
comment13.target=BST.Node\ deleteMin(BST.Node)
comment14.params=
comment14.target=void\ deleteMax()
comment14.text=\n\ Removes\ the\ largest\ key\ and\ associated\ value\ from\ the\ symbol\ table.\n\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\n
comment15.params=x
comment15.target=BST.Node\ deleteMax(BST.Node)
comment16.params=key
comment16.target=void\ delete(java.lang.Comparable)
comment16.text=\n\ Removes\ the\ specified\ key\ and\ its\ associated\ value\ from\ this\ symbol\ table\ \ \ \ \ \n\ (if\ the\ key\ is\ in\ this\ symbol\ table).\ \ \ \ \n\n\ @param\ \ key\ the\ key\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment17.params=x\ key
comment17.target=BST.Node\ delete(BST.Node,\ java.lang.Comparable)
comment18.params=
comment18.target=java.lang.Comparable\ min()
comment18.text=\n\ Returns\ the\ smallest\ key\ in\ the\ symbol\ table.\n\n\ @return\ the\ smallest\ key\ in\ the\ symbol\ table\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\n
comment19.params=x
comment19.target=BST.Node\ min(BST.Node)
comment2.params=
comment2.target=boolean\ isEmpty()
comment2.text=\n\ Returns\ true\ if\ this\ symbol\ table\ is\ empty.\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ is\ empty;\ {@code\ false}\ otherwise\n
comment20.params=
comment20.target=java.lang.Comparable\ max()
comment20.text=\n\ Returns\ the\ largest\ key\ in\ the\ symbol\ table.\n\n\ @return\ the\ largest\ key\ in\ the\ symbol\ table\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\n
comment21.params=x
comment21.target=BST.Node\ max(BST.Node)
comment22.params=key
comment22.target=java.lang.Comparable\ floor(java.lang.Comparable)
comment22.text=\n\ Returns\ the\ largest\ key\ in\ the\ symbol\ table\ less\ than\ or\ equal\ to\ {@code\ key}.\n\n\ @param\ \ key\ the\ key\n\ @return\ the\ largest\ key\ in\ the\ symbol\ table\ less\ than\ or\ equal\ to\ {@code\ key}\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ such\ key\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment23.params=x\ key
comment23.target=BST.Node\ floor(BST.Node,\ java.lang.Comparable)
comment24.params=key
comment24.target=java.lang.Comparable\ floor2(java.lang.Comparable)
comment25.params=x\ key\ best
comment25.target=java.lang.Comparable\ floor2(BST.Node,\ java.lang.Comparable,\ java.lang.Comparable)
comment26.params=key
comment26.target=java.lang.Comparable\ ceiling(java.lang.Comparable)
comment26.text=\n\ Returns\ the\ smallest\ key\ in\ the\ symbol\ table\ greater\ than\ or\ equal\ to\ {@code\ key}.\n\n\ @param\ \ key\ the\ key\n\ @return\ the\ smallest\ key\ in\ the\ symbol\ table\ greater\ than\ or\ equal\ to\ {@code\ key}\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ such\ key\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment27.params=x\ key
comment27.target=BST.Node\ ceiling(BST.Node,\ java.lang.Comparable)
comment28.params=k
comment28.target=java.lang.Comparable\ select(int)
comment28.text=\n\ Return\ the\ kth\ smallest\ key\ in\ the\ symbol\ table.\n\n\ @param\ \ k\ the\ order\ statistic\n\ @return\ the\ {@code\ k}th\ smallest\ key\ in\ the\ symbol\ table\n\ @throws\ IllegalArgumentException\ unless\ {@code\ k}\ is\ between\ 0\ and\n\ \ \ \ \ \ \ \ <em>n</em>\u20131\n
comment29.params=x\ k
comment29.target=BST.Node\ select(BST.Node,\ int)
comment3.params=
comment3.target=int\ size()
comment3.text=\n\ Returns\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table.\n\ @return\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table\n
comment30.params=key
comment30.target=int\ rank(java.lang.Comparable)
comment30.text=\n\ Return\ the\ number\ of\ keys\ in\ the\ symbol\ table\ strictly\ less\ than\ {@code\ key}.\n\n\ @param\ \ key\ the\ key\n\ @return\ the\ number\ of\ keys\ in\ the\ symbol\ table\ strictly\ less\ than\ {@code\ key}\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment31.params=key\ x
comment31.target=int\ rank(java.lang.Comparable,\ BST.Node)
comment32.params=
comment32.target=java.lang.Iterable\ keys()
comment32.text=\n\ Returns\ all\ keys\ in\ the\ symbol\ table\ as\ an\ {@code\ Iterable}.\n\ To\ iterate\ over\ all\ of\ the\ keys\ in\ the\ symbol\ table\ named\ {@code\ st},\n\ use\ the\ foreach\ notation\:\ {@code\ for\ (Key\ key\ \:\ st.keys())}.\n\n\ @return\ all\ keys\ in\ the\ symbol\ table\n
comment33.params=lo\ hi
comment33.target=java.lang.Iterable\ keys(java.lang.Comparable,\ java.lang.Comparable)
comment33.text=\n\ Returns\ all\ keys\ in\ the\ symbol\ table\ in\ the\ given\ range,\n\ as\ an\ {@code\ Iterable}.\n\n\ @param\ \ lo\ minimum\ endpoint\n\ @param\ \ hi\ maximum\ endpoint\n\ @return\ all\ keys\ in\ the\ symbol\ table\ between\ {@code\ lo}\ \n\ \ \ \ \ \ \ \ \ (inclusive)\ and\ {@code\ hi}\ (inclusive)\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ lo}\ or\ {@code\ hi}\n\ \ \ \ \ \ \ \ \ is\ {@code\ null}\n
comment34.params=x\ queue\ lo\ hi
comment34.target=void\ keys(BST.Node,\ edu.princeton.cs.algs4.Queue,\ java.lang.Comparable,\ java.lang.Comparable)
comment35.params=lo\ hi
comment35.target=int\ size(java.lang.Comparable,\ java.lang.Comparable)
comment35.text=\n\ Returns\ the\ number\ of\ keys\ in\ the\ symbol\ table\ in\ the\ given\ range.\n\n\ @param\ \ lo\ minimum\ endpoint\n\ @param\ \ hi\ maximum\ endpoint\n\ @return\ the\ number\ of\ keys\ in\ the\ symbol\ table\ between\ {@code\ lo}\ \n\ \ \ \ \ \ \ \ \ (inclusive)\ and\ {@code\ hi}\ (inclusive)\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ lo}\ or\ {@code\ hi}\n\ \ \ \ \ \ \ \ \ is\ {@code\ null}\n
comment36.params=
comment36.target=int\ height()
comment36.text=\n\ Returns\ the\ height\ of\ the\ BST\ (for\ debugging).\n\n\ @return\ the\ height\ of\ the\ BST\ (a\ 1-node\ tree\ has\ height\ 0)\n
comment37.params=x
comment37.target=int\ height(BST.Node)
comment38.params=
comment38.target=java.lang.Iterable\ levelOrder()
comment38.text=\n\ Returns\ the\ keys\ in\ the\ BST\ in\ level\ order\ (for\ debugging).\n\n\ @return\ the\ keys\ in\ the\ BST\ in\ level\ order\ traversal\n
comment39.params=
comment39.target=boolean\ check()
comment39.text=\n\ \ Check\ integrity\ of\ BST\ data\ structure.\n
comment4.params=x
comment4.target=int\ size(BST.Node)
comment40.params=
comment40.target=boolean\ isBST()
comment41.params=x\ min\ max
comment41.target=boolean\ isBST(BST.Node,\ java.lang.Comparable,\ java.lang.Comparable)
comment42.params=
comment42.target=boolean\ isSizeConsistent()
comment43.params=x
comment43.target=boolean\ isSizeConsistent(BST.Node)
comment44.params=
comment44.target=boolean\ isRankConsistent()
comment45.params=args
comment45.target=void\ main(java.lang.String[])
comment45.text=\n\ Unit\ tests\ the\ {@code\ BST}\ data\ type.\n\n\ @param\ args\ the\ command-line\ arguments\n
comment5.params=key
comment5.target=boolean\ contains(java.lang.Comparable)
comment5.text=\n\ Does\ this\ symbol\ table\ contain\ the\ given\ key?\n\n\ @param\ \ key\ the\ key\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ contains\ {@code\ key}\ and\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment6.params=key
comment6.target=java.lang.Object\ get(java.lang.Comparable)
comment6.text=\n\ Returns\ the\ value\ associated\ with\ the\ given\ key.\n\n\ @param\ \ key\ the\ key\n\ @return\ the\ value\ associated\ with\ the\ given\ key\ if\ the\ key\ is\ in\ the\ symbol\ table\n\ \ \ \ \ \ \ \ \ and\ {@code\ null}\ if\ the\ key\ is\ not\ in\ the\ symbol\ table\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment7.params=x\ key
comment7.target=java.lang.Object\ get(BST.Node,\ java.lang.Comparable)
comment8.params=key\ val
comment8.target=void\ put(java.lang.Comparable,\ java.lang.Object)
comment8.text=\n\ Inserts\ the\ specified\ key-value\ pair\ into\ the\ symbol\ table,\ overwriting\ the\ old\ \n\ value\ with\ the\ new\ value\ if\ the\ symbol\ table\ already\ contains\ the\ specified\ key.\n\ Deletes\ the\ specified\ key\ (and\ its\ associated\ value)\ from\ this\ symbol\ table\n\ if\ the\ specified\ value\ is\ {@code\ null}.\n\n\ @param\ \ key\ the\ key\n\ @param\ \ val\ the\ value\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment9.params=x\ key\ val
comment9.target=BST.Node\ put(BST.Node,\ java.lang.Comparable,\ java.lang.Object)
numComments=46
