#BlueJ class context
comment0.target=RedBlackBST
comment0.text=\n
comment1.params=
comment1.target=RedBlackBST()
comment1.text=\n\ Initializes\ an\ empty\ symbol\ table.\n
comment10.params=h\ key\ val
comment10.target=RedBlackBST.Node\ put(RedBlackBST.Node,\ java.lang.Comparable,\ java.lang.Object)
comment11.params=
comment11.target=int\ getCompareCount()
comment12.params=
comment12.target=boolean\ lastPut()
comment13.params=
comment13.target=void\ deleteMin()
comment13.text=\n\ Removes\ the\ smallest\ key\ and\ associated\ value\ from\ the\ symbol\ table.\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\n
comment14.params=h
comment14.target=RedBlackBST.Node\ deleteMin(RedBlackBST.Node)
comment15.params=
comment15.target=void\ deleteMax()
comment15.text=\n\ Removes\ the\ largest\ key\ and\ associated\ value\ from\ the\ symbol\ table.\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\n
comment16.params=h
comment16.target=RedBlackBST.Node\ deleteMax(RedBlackBST.Node)
comment17.params=key
comment17.target=void\ delete(java.lang.Comparable)
comment17.text=\n\ Removes\ the\ specified\ key\ and\ its\ associated\ value\ from\ this\ symbol\ table\ \ \ \ \ \n\ (if\ the\ key\ is\ in\ this\ symbol\ table).\ \ \ \ \n\n\ @param\ \ key\ the\ key\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment18.params=h\ key
comment18.target=RedBlackBST.Node\ delete(RedBlackBST.Node,\ java.lang.Comparable)
comment19.params=h
comment19.target=RedBlackBST.Node\ rotateRight(RedBlackBST.Node)
comment19.text=\n\ \ Red-black\ tree\ helper\ functions.\n
comment2.params=x
comment2.target=boolean\ isRed(RedBlackBST.Node)
comment2.text=\n\ \ Node\ helper\ methods.\n
comment20.params=h
comment20.target=RedBlackBST.Node\ rotateLeft(RedBlackBST.Node)
comment21.params=h
comment21.target=void\ flipColors(RedBlackBST.Node)
comment22.params=h
comment22.target=RedBlackBST.Node\ moveRedLeft(RedBlackBST.Node)
comment23.params=h
comment23.target=RedBlackBST.Node\ moveRedRight(RedBlackBST.Node)
comment24.params=h
comment24.target=RedBlackBST.Node\ balance(RedBlackBST.Node)
comment25.params=
comment25.target=int\ height()
comment25.text=\n\ Returns\ the\ height\ of\ the\ BST\ (for\ debugging).\n\ @return\ the\ height\ of\ the\ BST\ (a\ 1-node\ tree\ has\ height\ 0)\n
comment26.params=x
comment26.target=int\ height(RedBlackBST.Node)
comment27.params=
comment27.target=java.lang.Comparable\ min()
comment27.text=\n\ Returns\ the\ smallest\ key\ in\ the\ symbol\ table.\n\ @return\ the\ smallest\ key\ in\ the\ symbol\ table\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\n
comment28.params=x
comment28.target=RedBlackBST.Node\ min(RedBlackBST.Node)
comment29.params=
comment29.target=java.lang.Comparable\ max()
comment29.text=\n\ Returns\ the\ largest\ key\ in\ the\ symbol\ table.\n\ @return\ the\ largest\ key\ in\ the\ symbol\ table\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\n
comment3.params=x
comment3.target=int\ size(RedBlackBST.Node)
comment30.params=x
comment30.target=RedBlackBST.Node\ max(RedBlackBST.Node)
comment31.params=key
comment31.target=java.lang.Comparable\ floor(java.lang.Comparable)
comment31.text=\n\ Returns\ the\ largest\ key\ in\ the\ symbol\ table\ less\ than\ or\ equal\ to\ {@code\ key}.\n\ @param\ key\ the\ key\n\ @return\ the\ largest\ key\ in\ the\ symbol\ table\ less\ than\ or\ equal\ to\ {@code\ key}\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ such\ key\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment32.params=x\ key
comment32.target=RedBlackBST.Node\ floor(RedBlackBST.Node,\ java.lang.Comparable)
comment33.params=key
comment33.target=java.lang.Comparable\ ceiling(java.lang.Comparable)
comment33.text=\n\ Returns\ the\ smallest\ key\ in\ the\ symbol\ table\ greater\ than\ or\ equal\ to\ {@code\ key}.\n\ @param\ key\ the\ key\n\ @return\ the\ smallest\ key\ in\ the\ symbol\ table\ greater\ than\ or\ equal\ to\ {@code\ key}\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ such\ key\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment34.params=x\ key
comment34.target=RedBlackBST.Node\ ceiling(RedBlackBST.Node,\ java.lang.Comparable)
comment35.params=k
comment35.target=java.lang.Comparable\ select(int)
comment35.text=\n\ Return\ the\ kth\ smallest\ key\ in\ the\ symbol\ table.\n\ @param\ k\ the\ order\ statistic\n\ @return\ the\ {@code\ k}th\ smallest\ key\ in\ the\ symbol\ table\n\ @throws\ IllegalArgumentException\ unless\ {@code\ k}\ is\ between\ 0\ and\n\ \ \ \ \ <em>n</em>\u20131\n
comment36.params=x\ k
comment36.target=RedBlackBST.Node\ select(RedBlackBST.Node,\ int)
comment37.params=key
comment37.target=int\ rank(java.lang.Comparable)
comment37.text=\n\ Return\ the\ number\ of\ keys\ in\ the\ symbol\ table\ strictly\ less\ than\ {@code\ key}.\n\ @param\ key\ the\ key\n\ @return\ the\ number\ of\ keys\ in\ the\ symbol\ table\ strictly\ less\ than\ {@code\ key}\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment38.params=key\ x
comment38.target=int\ rank(java.lang.Comparable,\ RedBlackBST.Node)
comment39.params=
comment39.target=java.lang.Iterable\ keys()
comment39.text=\n\ Returns\ all\ keys\ in\ the\ symbol\ table\ as\ an\ {@code\ Iterable}.\n\ To\ iterate\ over\ all\ of\ the\ keys\ in\ the\ symbol\ table\ named\ {@code\ st},\n\ use\ the\ foreach\ notation\:\ {@code\ for\ (Key\ key\ \:\ st.keys())}.\n\ @return\ all\ keys\ in\ the\ symbol\ table\ as\ an\ {@code\ Iterable}\n
comment4.params=
comment4.target=int\ size()
comment4.text=\n\ Returns\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table.\n\ @return\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table\n
comment40.params=lo\ hi
comment40.target=java.lang.Iterable\ keys(java.lang.Comparable,\ java.lang.Comparable)
comment40.text=\n\ Returns\ all\ keys\ in\ the\ symbol\ table\ in\ the\ given\ range,\n\ as\ an\ {@code\ Iterable}.\n\n\ @param\ \ lo\ minimum\ endpoint\n\ @param\ \ hi\ maximum\ endpoint\n\ @return\ all\ keys\ in\ the\ sybol\ table\ between\ {@code\ lo}\ \n\ \ \ \ (inclusive)\ and\ {@code\ hi}\ (inclusive)\ as\ an\ {@code\ Iterable}\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ lo}\ or\ {@code\ hi}\n\ \ \ \ is\ {@code\ null}\n
comment41.params=x\ queue\ lo\ hi
comment41.target=void\ keys(RedBlackBST.Node,\ edu.princeton.cs.algs4.Queue,\ java.lang.Comparable,\ java.lang.Comparable)
comment42.params=lo\ hi
comment42.target=int\ size(java.lang.Comparable,\ java.lang.Comparable)
comment42.text=\n\ Returns\ the\ number\ of\ keys\ in\ the\ symbol\ table\ in\ the\ given\ range.\n\n\ @param\ \ lo\ minimum\ endpoint\n\ @param\ \ hi\ maximum\ endpoint\n\ @return\ the\ number\ of\ keys\ in\ the\ sybol\ table\ between\ {@code\ lo}\ \n\ \ \ \ (inclusive)\ and\ {@code\ hi}\ (inclusive)\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ lo}\ or\ {@code\ hi}\n\ \ \ \ is\ {@code\ null}\n
comment43.params=
comment43.target=boolean\ check()
comment43.text=\n\ \ Check\ integrity\ of\ red-black\ tree\ data\ structure.\n
comment44.params=
comment44.target=boolean\ isBST()
comment45.params=x\ min\ max
comment45.target=boolean\ isBST(RedBlackBST.Node,\ java.lang.Comparable,\ java.lang.Comparable)
comment46.params=
comment46.target=boolean\ isSizeConsistent()
comment47.params=x
comment47.target=boolean\ isSizeConsistent(RedBlackBST.Node)
comment48.params=
comment48.target=boolean\ isRankConsistent()
comment49.params=
comment49.target=boolean\ is23()
comment5.params=
comment5.target=boolean\ isEmpty()
comment5.text=\n\ Is\ this\ symbol\ table\ empty?\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ is\ empty\ and\ {@code\ false}\ otherwise\n
comment50.params=x
comment50.target=boolean\ is23(RedBlackBST.Node)
comment51.params=
comment51.target=boolean\ isBalanced()
comment52.params=x\ black
comment52.target=boolean\ isBalanced(RedBlackBST.Node,\ int)
comment53.params=args
comment53.target=void\ main(java.lang.String[])
comment53.text=\n\ Unit\ tests\ the\ {@code\ RedBlackBST}\ data\ type.\n\n\ @param\ args\ the\ command-line\ arguments\n
comment6.params=key
comment6.target=java.lang.Object\ get(java.lang.Comparable)
comment6.text=\n\ Returns\ the\ value\ associated\ with\ the\ given\ key.\n\ @param\ key\ the\ key\n\ @return\ the\ value\ associated\ with\ the\ given\ key\ if\ the\ key\ is\ in\ the\ symbol\ table\n\ \ \ \ \ and\ {@code\ null}\ if\ the\ key\ is\ not\ in\ the\ symbol\ table\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment7.params=x\ key
comment7.target=java.lang.Object\ get(RedBlackBST.Node,\ java.lang.Comparable)
comment8.params=key
comment8.target=boolean\ contains(java.lang.Comparable)
comment8.text=\n\ Does\ this\ symbol\ table\ contain\ the\ given\ key?\n\ @param\ key\ the\ key\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ contains\ {@code\ key}\ and\n\ \ \ \ \ {@code\ false}\ otherwise\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
comment9.params=key\ val
comment9.target=void\ put(java.lang.Comparable,\ java.lang.Object)
comment9.text=\n\ Inserts\ the\ specified\ key-value\ pair\ into\ the\ symbol\ table,\ overwriting\ the\ old\ \n\ value\ with\ the\ new\ value\ if\ the\ symbol\ table\ already\ contains\ the\ specified\ key.\n\ Deletes\ the\ specified\ key\ (and\ its\ associated\ value)\ from\ this\ symbol\ table\n\ if\ the\ specified\ value\ is\ {@code\ null}.\n\n\ @param\ key\ the\ key\n\ @param\ val\ the\ value\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\n
numComments=54
