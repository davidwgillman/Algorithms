#BlueJ class context
comment0.target=RedBlackBST
comment0.text=\r\n\ \ The\ {@code\ BST}\ class\ represents\ an\ ordered\ symbol\ table\ of\ generic\r\n\ \ key-value\ pairs.\r\n\ \ It\ supports\ the\ usual\ <em>put</em>,\ <em>get</em>,\ <em>contains</em>,\r\n\ \ <em>delete</em>,\ <em>size</em>,\ and\ <em>is-empty</em>\ methods.\r\n\ \ It\ also\ provides\ ordered\ methods\ for\ finding\ the\ <em>minimum</em>,\r\n\ \ <em>maximum</em>,\ <em>floor</em>,\ and\ <em>ceiling</em>.\r\n\ \ It\ also\ provides\ a\ <em>keys</em>\ method\ for\ iterating\ over\ all\ of\ the\ keys.\r\n\ \ A\ symbol\ table\ implements\ the\ <em>associative\ array</em>\ abstraction\:\r\n\ \ when\ associating\ a\ value\ with\ a\ key\ that\ is\ already\ in\ the\ symbol\ table,\r\n\ \ the\ convention\ is\ to\ replace\ the\ old\ value\ with\ the\ new\ value.\r\n\ \ Unlike\ {@link\ java.util.Map},\ this\ class\ uses\ the\ convention\ that\r\n\ \ values\ cannot\ be\ {@code\ null}\u00E2\u20AC\u201Dsetting\ the\r\n\ \ value\ associated\ with\ a\ key\ to\ {@code\ null}\ is\ equivalent\ to\ deleting\ the\ key\r\n\ \ from\ the\ symbol\ table.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ a\ left-leaning\ red-black\ BST.\ It\ requires\ that\r\n\ \ the\ key\ type\ implements\ the\ {@code\ Comparable}\ interface\ and\ calls\ the\r\n\ \ {@code\ compareTo()}\ and\ method\ to\ compare\ two\ keys.\ It\ does\ not\ call\ either\r\n\ \ {@code\ equals()}\ or\ {@code\ hashCode()}.\r\n\ \ The\ <em>put</em>,\ <em>contains</em>,\ <em>remove</em>,\ <em>minimum</em>,\r\n\ \ <em>maximum</em>,\ <em>ceiling</em>,\ and\ <em>floor</em>\ operations\ each\ take\r\n\ \ logarithmic\ time\ in\ the\ worst\ case,\ if\ the\ tree\ becomes\ unbalanced.\r\n\ \ The\ <em>size</em>,\ and\ <em>is-empty</em>\ operations\ take\ constant\ time.\r\n\ \ Construction\ takes\ constant\ time.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\ <a\ href\="https\://algs4.cs.princeton.edu/33balanced">Section\ 3.3</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\ \ For\ other\ implementations\ of\ the\ same\ API,\ see\ {@link\ ST},\ {@link\ BinarySearchST},\r\n\ \ {@link\ SequentialSearchST},\ {@link\ BST},\r\n\ \ {@link\ SeparateChainingHashST},\ {@link\ LinearProbingHashST},\ and\ {@link\ AVLTreeST}.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=
comment1.target=RedBlackBST()
comment1.text=\r\n\ Initializes\ an\ empty\ symbol\ table.\r\n
comment10.params=key
comment10.target=java.lang.Object\ get(java.lang.Comparable)
comment10.text=\r\n\ Returns\ the\ value\ associated\ with\ the\ given\ key.\r\n\ @param\ key\ the\ key\r\n\ @return\ the\ value\ associated\ with\ the\ given\ key\ if\ the\ key\ is\ in\ the\ symbol\ table\r\n\ \ \ \ \ and\ {@code\ null}\ if\ the\ key\ is\ not\ in\ the\ symbol\ table\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment11.params=x\ key
comment11.target=java.lang.Object\ get(RedBlackBST.Node,\ java.lang.Comparable)
comment12.params=key
comment12.target=boolean\ contains(java.lang.Comparable)
comment12.text=\r\n\ Does\ this\ symbol\ table\ contain\ the\ given\ key?\r\n\ @param\ key\ the\ key\r\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ contains\ {@code\ key}\ and\r\n\ \ \ \ \ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment13.params=key\ val
comment13.target=void\ put(java.lang.Comparable,\ java.lang.Object)
comment13.text=\r\n\ Inserts\ the\ specified\ key-value\ pair\ into\ the\ symbol\ table,\ overwriting\ the\ old\ \r\n\ value\ with\ the\ new\ value\ if\ the\ symbol\ table\ already\ contains\ the\ specified\ key.\r\n\ Deletes\ the\ specified\ key\ (and\ its\ associated\ value)\ from\ this\ symbol\ table\r\n\ if\ the\ specified\ value\ is\ {@code\ null}.\r\n\r\n\ @param\ key\ the\ key\r\n\ @param\ val\ the\ value\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment14.params=h\ key\ val
comment14.target=RedBlackBST.Node\ put(RedBlackBST.Node,\ java.lang.Comparable,\ java.lang.Object)
comment15.params=
comment15.target=void\ deleteMin()
comment15.text=\r\n\ Removes\ the\ smallest\ key\ and\ associated\ value\ from\ the\ symbol\ table.\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment16.params=h
comment16.target=RedBlackBST.Node\ deleteMin(RedBlackBST.Node)
comment17.params=
comment17.target=void\ deleteMax()
comment17.text=\r\n\ Removes\ the\ largest\ key\ and\ associated\ value\ from\ the\ symbol\ table.\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment18.params=h
comment18.target=RedBlackBST.Node\ deleteMax(RedBlackBST.Node)
comment19.params=key
comment19.target=void\ delete(java.lang.Comparable)
comment19.text=\r\n\ Removes\ the\ specified\ key\ and\ its\ associated\ value\ from\ this\ symbol\ table\ \ \ \ \ \r\n\ (if\ the\ key\ is\ in\ this\ symbol\ table).\ \ \ \ \r\n\r\n\ @param\ \ key\ the\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment2.params=x
comment2.target=boolean\ isRed(RedBlackBST.Node)
comment2.text=\r\n\ \ Node\ helper\ methods.\r\n
comment20.params=h\ key
comment20.target=RedBlackBST.Node\ delete(RedBlackBST.Node,\ java.lang.Comparable)
comment21.params=h
comment21.target=RedBlackBST.Node\ rotateRight(RedBlackBST.Node)
comment21.text=\r\n\ \ Red-black\ tree\ helper\ functions.\r\n
comment22.params=h
comment22.target=RedBlackBST.Node\ rotateLeft(RedBlackBST.Node)
comment23.params=h
comment23.target=void\ flipColors(RedBlackBST.Node)
comment24.params=h
comment24.target=RedBlackBST.Node\ moveRedLeft(RedBlackBST.Node)
comment25.params=h
comment25.target=RedBlackBST.Node\ moveRedRight(RedBlackBST.Node)
comment26.params=h
comment26.target=RedBlackBST.Node\ balance(RedBlackBST.Node)
comment27.params=
comment27.target=int\ height()
comment27.text=\r\n\ Returns\ the\ height\ of\ the\ BST\ (for\ debugging).\r\n\ @return\ the\ height\ of\ the\ BST\ (a\ 1-node\ tree\ has\ height\ 0)\r\n
comment28.params=x
comment28.target=int\ height(RedBlackBST.Node)
comment29.params=
comment29.target=java.lang.Comparable\ min()
comment29.text=\r\n\ Returns\ the\ smallest\ key\ in\ the\ symbol\ table.\r\n\ @return\ the\ smallest\ key\ in\ the\ symbol\ table\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment3.params=x
comment3.target=int\ size(RedBlackBST.Node)
comment30.params=x
comment30.target=RedBlackBST.Node\ min(RedBlackBST.Node)
comment31.params=
comment31.target=java.lang.Comparable\ max()
comment31.text=\r\n\ Returns\ the\ largest\ key\ in\ the\ symbol\ table.\r\n\ @return\ the\ largest\ key\ in\ the\ symbol\ table\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment32.params=x
comment32.target=RedBlackBST.Node\ max(RedBlackBST.Node)
comment33.params=key
comment33.target=java.lang.Comparable\ floor(java.lang.Comparable)
comment33.text=\r\n\ Returns\ the\ largest\ key\ in\ the\ symbol\ table\ less\ than\ or\ equal\ to\ {@code\ key}.\r\n\ @param\ key\ the\ key\r\n\ @return\ the\ largest\ key\ in\ the\ symbol\ table\ less\ than\ or\ equal\ to\ {@code\ key}\r\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ such\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment34.params=x\ key
comment34.target=RedBlackBST.Node\ floor(RedBlackBST.Node,\ java.lang.Comparable)
comment35.params=key
comment35.target=java.lang.Comparable\ ceiling(java.lang.Comparable)
comment35.text=\r\n\ Returns\ the\ smallest\ key\ in\ the\ symbol\ table\ greater\ than\ or\ equal\ to\ {@code\ key}.\r\n\ @param\ key\ the\ key\r\n\ @return\ the\ smallest\ key\ in\ the\ symbol\ table\ greater\ than\ or\ equal\ to\ {@code\ key}\r\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ such\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment36.params=x\ key
comment36.target=RedBlackBST.Node\ ceiling(RedBlackBST.Node,\ java.lang.Comparable)
comment37.params=k
comment37.target=java.lang.Comparable\ select(int)
comment37.text=\r\n\ Return\ the\ kth\ smallest\ key\ in\ the\ symbol\ table.\r\n\ @param\ k\ the\ order\ statistic\r\n\ @return\ the\ {@code\ k}th\ smallest\ key\ in\ the\ symbol\ table\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ k}\ is\ between\ 0\ and\r\n\ \ \ \ \ <em>n</em>\u00E2\u20AC\u201C1\r\n
comment38.params=x\ k
comment38.target=RedBlackBST.Node\ select(RedBlackBST.Node,\ int)
comment39.params=key
comment39.target=int\ rank(java.lang.Comparable)
comment39.text=\r\n\ Return\ the\ number\ of\ keys\ in\ the\ symbol\ table\ strictly\ less\ than\ {@code\ key}.\r\n\ @param\ key\ the\ key\r\n\ @return\ the\ number\ of\ keys\ in\ the\ symbol\ table\ strictly\ less\ than\ {@code\ key}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment4.params=
comment4.target=int\ getLastPutCompareCount()
comment40.params=key\ x
comment40.target=int\ rank(java.lang.Comparable,\ RedBlackBST.Node)
comment41.params=
comment41.target=java.lang.Iterable\ keys()
comment41.text=\r\n\ Returns\ all\ keys\ in\ the\ symbol\ table\ as\ an\ {@code\ Iterable}.\r\n\ To\ iterate\ over\ all\ of\ the\ keys\ in\ the\ symbol\ table\ named\ {@code\ st},\r\n\ use\ the\ foreach\ notation\:\ {@code\ for\ (Key\ key\ \:\ st.keys())}.\r\n\ @return\ all\ keys\ in\ the\ symbol\ table\ as\ an\ {@code\ Iterable}\r\n
comment42.params=lo\ hi
comment42.target=java.lang.Iterable\ keys(java.lang.Comparable,\ java.lang.Comparable)
comment42.text=\r\n\ Returns\ all\ keys\ in\ the\ symbol\ table\ in\ the\ given\ range,\r\n\ as\ an\ {@code\ Iterable}.\r\n\r\n\ @param\ \ lo\ minimum\ endpoint\r\n\ @param\ \ hi\ maximum\ endpoint\r\n\ @return\ all\ keys\ in\ the\ sybol\ table\ between\ {@code\ lo}\ \r\n\ \ \ \ (inclusive)\ and\ {@code\ hi}\ (inclusive)\ as\ an\ {@code\ Iterable}\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ lo}\ or\ {@code\ hi}\r\n\ \ \ \ is\ {@code\ null}\r\n
comment43.params=x\ queue\ lo\ hi
comment43.target=void\ keys(RedBlackBST.Node,\ Queue,\ java.lang.Comparable,\ java.lang.Comparable)
comment44.params=lo\ hi
comment44.target=int\ size(java.lang.Comparable,\ java.lang.Comparable)
comment44.text=\r\n\ Returns\ the\ number\ of\ keys\ in\ the\ symbol\ table\ in\ the\ given\ range.\r\n\r\n\ @param\ \ lo\ minimum\ endpoint\r\n\ @param\ \ hi\ maximum\ endpoint\r\n\ @return\ the\ number\ of\ keys\ in\ the\ sybol\ table\ between\ {@code\ lo}\ \r\n\ \ \ \ (inclusive)\ and\ {@code\ hi}\ (inclusive)\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ lo}\ or\ {@code\ hi}\r\n\ \ \ \ is\ {@code\ null}\r\n
comment45.params=
comment45.target=boolean\ check()
comment45.text=\r\n\ \ Check\ integrity\ of\ red-black\ tree\ data\ structure.\r\n
comment46.params=
comment46.target=boolean\ isBST()
comment47.params=x\ min\ max
comment47.target=boolean\ isBST(RedBlackBST.Node,\ java.lang.Comparable,\ java.lang.Comparable)
comment48.params=
comment48.target=boolean\ isSizeConsistent()
comment49.params=x
comment49.target=boolean\ isSizeConsistent(RedBlackBST.Node)
comment5.params=inp
comment5.target=void\ setLastPutCompareCount(int)
comment50.params=
comment50.target=boolean\ isRankConsistent()
comment51.params=
comment51.target=boolean\ is23()
comment52.params=x
comment52.target=boolean\ is23(RedBlackBST.Node)
comment53.params=
comment53.target=boolean\ isBalanced()
comment54.params=x\ black
comment54.target=boolean\ isBalanced(RedBlackBST.Node,\ int)
comment55.params=args
comment55.target=void\ main(java.lang.String[])
comment55.text=\r\n\ Unit\ tests\ the\ {@code\ RedBlackBST}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment6.params=
comment6.target=int\ getLastPutNew()
comment7.params=inp
comment7.target=void\ setLastPutNew(int)
comment8.params=
comment8.target=int\ size()
comment8.text=\r\n\ Returns\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table.\r\n\ @return\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table\r\n
comment9.params=
comment9.target=boolean\ isEmpty()
comment9.text=\r\n\ Is\ this\ symbol\ table\ empty?\r\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ is\ empty\ and\ {@code\ false}\ otherwise\r\n
numComments=56
