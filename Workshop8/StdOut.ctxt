#BlueJ class context
comment0.target=StdOut
comment0.text=\r\n\ \ This\ class\ provides\ methods\ for\ printing\ strings\ and\ numbers\ to\ standard\ output.\r\n\ \ <p>\r\n\ \ <b>Getting\ started.</b>\r\n\ \ To\ use\ this\ class,\ you\ must\ have\ {@code\ StdOut.class}\ in\ your\r\n\ \ Java\ classpath.\ If\ you\ used\ our\ autoinstaller,\ you\ should\ be\ all\ set.\r\n\ \ Otherwise,\ download\r\n\ \ <a\ href\ \=\ "http\://introcs.cs.princeton.edu/java/stdlib/StdOut.java">StdOut.java</a>\r\n\ \ and\ put\ a\ copy\ in\ your\ working\ directory.\r\n\ \ <p>\r\n\ \ Here\ is\ an\ example\ program\ that\ uses\ {@code\ StdOut}\:\r\n\ \ <pre>\r\n\ \ \ public\ class\ TestStdOut\ {\r\n\ \ \ \ \ \ \ public\ static\ void\ main(String[]\ args)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ int\ a\ \=\ 17;\r\n\ \ \ \ \ \ \ \ \ \ \ int\ b\ \=\ 23;\r\n\ \ \ \ \ \ \ \ \ \ \ int\ sum\ \=\ a\ +\ b;\r\n\ \ \ \ \ \ \ \ \ \ \ StdOut.println("Hello,\ World");\r\n\ \ \ \ \ \ \ \ \ \ \ StdOut.printf("%d\ +\ %d\ \=\ %d\\n",\ a,\ b,\ sum);\r\n\ \ \ \ \ \ \ }\r\n\ \ \ }\r\n\ \ </pre>\r\n\ \ <p>\r\n\ \ <b>Differences\ with\ System.out.</b>\r\n\ \ The\ behavior\ of\ {@code\ StdOut}\ is\ similar\ to\ that\ of\ {@link\ System\#out},\r\n\ \ but\ there\ are\ a\ few\ subtle\ differences\:\r\n\ \ <ul>\r\n\ \ <li>\ {@code\ StdOut}\ coerces\ the\ character-set\ encoding\ to\ UTF-8,\r\n\ \ \ \ \ \ \ which\ is\ a\ standard\ character\ encoding\ for\ Unicode.\r\n\ \ <li>\ {@code\ StdOut}\ coerces\ the\ locale\ to\ {@link\ Locale\#US},\r\n\ \ \ \ \ \ \ for\ consistency\ with\ {@link\ StdIn},\ {@link\ Double\#parseDouble(String)},\r\n\ \ \ \ \ \ \ and\ floating-point\ literals.\r\n\ \ <li>\ {@code\ StdOut}\ <em>flushes</em>\ standard\ output\ after\ each\ call\ to\r\n\ \ \ \ \ \ \ {@code\ print()}\ so\ that\ text\ will\ appear\ immediately\ in\ the\ terminal.\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ <b>Reference.</b>\r\n\ \ For\ additional\ documentation,\r\n\ \ see\ <a\ href\="http\://introcs.cs.princeton.edu/15inout">Section\ 1.5</a>\ of\r\n\ \ <em>Computer\ Science\:\ An\ Interdisciplinary\ Approach</em>\r\n\ \ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=
comment1.target=StdOut()
comment10.params=x
comment10.target=void\ println(long)
comment10.text=\r\n\ Prints\ a\ long\ to\ standard\ output\ and\ then\ terminates\ the\ line.\r\n\r\n\ @param\ x\ the\ long\ to\ print\r\n
comment11.params=x
comment11.target=void\ println(short)
comment11.text=\r\n\ Prints\ a\ short\ integer\ to\ standard\ output\ and\ then\ terminates\ the\ line.\r\n\r\n\ @param\ x\ the\ short\ to\ print\r\n
comment12.params=x
comment12.target=void\ println(byte)
comment12.text=\r\n\ Prints\ a\ byte\ to\ standard\ output\ and\ then\ terminates\ the\ line.\r\n\ <p>\r\n\ To\ write\ binary\ data,\ see\ {@link\ BinaryStdOut}.\r\n\r\n\ @param\ x\ the\ byte\ to\ print\r\n
comment13.params=
comment13.target=void\ print()
comment13.text=\r\n\ Flushes\ standard\ output.\r\n
comment14.params=x
comment14.target=void\ print(java.lang.Object)
comment14.text=\r\n\ Prints\ an\ object\ to\ standard\ output\ and\ flushes\ standard\ output.\r\n\ \r\n\ @param\ x\ the\ object\ to\ print\r\n
comment15.params=x
comment15.target=void\ print(boolean)
comment15.text=\r\n\ Prints\ a\ boolean\ to\ standard\ output\ and\ flushes\ standard\ output.\r\n\ \r\n\ @param\ x\ the\ boolean\ to\ print\r\n
comment16.params=x
comment16.target=void\ print(char)
comment16.text=\r\n\ Prints\ a\ character\ to\ standard\ output\ and\ flushes\ standard\ output.\r\n\ \r\n\ @param\ x\ the\ character\ to\ print\r\n
comment17.params=x
comment17.target=void\ print(double)
comment17.text=\r\n\ Prints\ a\ double\ to\ standard\ output\ and\ flushes\ standard\ output.\r\n\ \r\n\ @param\ x\ the\ double\ to\ print\r\n
comment18.params=x
comment18.target=void\ print(float)
comment18.text=\r\n\ Prints\ a\ float\ to\ standard\ output\ and\ flushes\ standard\ output.\r\n\ \r\n\ @param\ x\ the\ float\ to\ print\r\n
comment19.params=x
comment19.target=void\ print(int)
comment19.text=\r\n\ Prints\ an\ integer\ to\ standard\ output\ and\ flushes\ standard\ output.\r\n\ \r\n\ @param\ x\ the\ integer\ to\ print\r\n
comment2.params=
comment2.target=void\ close()
comment2.text=\r\n\ Closes\ standard\ output.\r\n
comment20.params=x
comment20.target=void\ print(long)
comment20.text=\r\n\ Prints\ a\ long\ integer\ to\ standard\ output\ and\ flushes\ standard\ output.\r\n\ \r\n\ @param\ x\ the\ long\ integer\ to\ print\r\n
comment21.params=x
comment21.target=void\ print(short)
comment21.text=\r\n\ Prints\ a\ short\ integer\ to\ standard\ output\ and\ flushes\ standard\ output.\r\n\ \r\n\ @param\ x\ the\ short\ integer\ to\ print\r\n
comment22.params=x
comment22.target=void\ print(byte)
comment22.text=\r\n\ Prints\ a\ byte\ to\ standard\ output\ and\ flushes\ standard\ output.\r\n\r\n\ @param\ x\ the\ byte\ to\ print\r\n
comment23.params=format\ args
comment23.target=void\ printf(java.lang.String,\ java.lang.Object[])
comment23.text=\r\n\ Prints\ a\ formatted\ string\ to\ standard\ output,\ using\ the\ specified\ format\r\n\ string\ and\ arguments,\ and\ then\ flushes\ standard\ output.\r\n\r\n\r\n\ @param\ format\ the\ <a\ href\ \=\ "http\://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html\#syntax">format\ string</a>\r\n\ @param\ args\ \ \ the\ arguments\ accompanying\ the\ format\ string\r\n
comment24.params=locale\ format\ args
comment24.target=void\ printf(java.util.Locale,\ java.lang.String,\ java.lang.Object[])
comment24.text=\r\n\ Prints\ a\ formatted\ string\ to\ standard\ output,\ using\ the\ locale\ and\r\n\ the\ specified\ format\ string\ and\ arguments;\ then\ flushes\ standard\ output.\r\n\r\n\ @param\ locale\ the\ locale\r\n\ @param\ format\ the\ <a\ href\ \=\ "http\://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html\#syntax">format\ string</a>\r\n\ @param\ args\ \ \ the\ arguments\ accompanying\ the\ format\ string\r\n
comment25.params=args
comment25.target=void\ main(java.lang.String[])
comment25.text=\r\n\ Unit\ tests\ some\ of\ the\ methods\ in\ {@code\ StdOut}.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment3.params=
comment3.target=void\ println()
comment3.text=\r\n\ Terminates\ the\ current\ line\ by\ printing\ the\ line-separator\ string.\r\n
comment4.params=x
comment4.target=void\ println(java.lang.Object)
comment4.text=\r\n\ Prints\ an\ object\ to\ this\ output\ stream\ and\ then\ terminates\ the\ line.\r\n\r\n\ @param\ x\ the\ object\ to\ print\r\n
comment5.params=x
comment5.target=void\ println(boolean)
comment5.text=\r\n\ Prints\ a\ boolean\ to\ standard\ output\ and\ then\ terminates\ the\ line.\r\n\r\n\ @param\ x\ the\ boolean\ to\ print\r\n
comment6.params=x
comment6.target=void\ println(char)
comment6.text=\r\n\ Prints\ a\ character\ to\ standard\ output\ and\ then\ terminates\ the\ line.\r\n\r\n\ @param\ x\ the\ character\ to\ print\r\n
comment7.params=x
comment7.target=void\ println(double)
comment7.text=\r\n\ Prints\ a\ double\ to\ standard\ output\ and\ then\ terminates\ the\ line.\r\n\r\n\ @param\ x\ the\ double\ to\ print\r\n
comment8.params=x
comment8.target=void\ println(float)
comment8.text=\r\n\ Prints\ an\ integer\ to\ standard\ output\ and\ then\ terminates\ the\ line.\r\n\r\n\ @param\ x\ the\ integer\ to\ print\r\n
comment9.params=x
comment9.target=void\ println(int)
comment9.text=\r\n\ Prints\ an\ integer\ to\ standard\ output\ and\ then\ terminates\ the\ line.\r\n\r\n\ @param\ x\ the\ integer\ to\ print\r\n
numComments=26
